/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.EvaluatePost200Response;
import org.openapitools.model.EvaluatePost400Response;
import org.openapitools.model.Welcome3;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-20T08:40:50.935496100-05:00[America/New_York]")
@Validated
@Tag(name = "evaluate", description = "the evaluate API")
public interface EvaluateApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /evaluate : Send return and get score
     * Returns a list of scores
     *
     * @param welcome3 Schema for the return (required)
     * @return Successfully returned an array of filter scores (status code 200)
     *         or Invalid request (status code 400)
     */
    @Operation(
        operationId = "evaluatePost",
        summary = "Send return and get score",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully returned an array of filter scores", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EvaluatePost200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EvaluatePost400Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BasicAuth")
        }
    )
//    @RequestMapping(
//        method = RequestMethod.POST,
//        value = "/evaluate",
//        produces = { "application/json" },
//        consumes = { "application/json" }
//    )
//    default ResponseEntity<EvaluatePost200Response> evaluatePost(
//        @Parameter(name = "Welcome3", description = "Schema for the return", required = true) @Valid @RequestBody Welcome3 welcome3
//    ) {
//        getRequest().ifPresent(request -> {
//            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
//                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
//                    String exampleString = "{ \"filter_name\" : \"filter_name\", \"filter_score\" : 0, \"filter_type\" : \"filter_type\" }";
//                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
//                    break;
//                }
//            }
//        });
//        System.out.println("default setup");
//        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
//
//    }

	ResponseEntity<EvaluatePost200Response> evaluatePost();

}
